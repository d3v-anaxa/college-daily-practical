* SEPT 22, 2022 --------------------------------->

\\ Preprocessor directives in C

We can consider a preprocessor as a compilation process, which runs when the developer runs the program. It is a pre-process of execution of a program using c/c++ language. To initialize a process of preprocessor commands, it's mandated to define with a hash symbol (#).  It can  preferably be the non-blank character, and for better readability, a preprocessor directive should start in the first column.

List of Preprocessor Directives
To execute a preprocessor program on a certain statement, some of the preprocessor directives types are:

```c
#define: It substitutes a preprocessor using macro.
#include: It helps to insert a certain header from another file.
#undef: It undefines a certain preprocessor macro.
#ifdef: It returns true if a certain macro is defined.
#ifndef: It returns true if a certain macro is not defined.
#if, #elif, #else, and #endif: It tests the program using a certain condition; these directives can be nested too. 
#line: It handles the line numbers on the errors and warnings. It can be used to change the line number and source files while generating output during compile time.
#error and #warning: It can be used for generating errors and warnings.
#error can be performed to stop compilation.
#warning is performed to continue compilation with messages in the console window.
#region and #endregion: To define the sections of the code to make them more understandable and readable, we can use the region using expansion and collapse features.
```

\\ macro-expansion
\\ edge cases in loops
\\ integer value swap without using third (temp) variable
\\ calculator program

* SEPT 23, 2022 --------------------------------->

\\ basic logic gates : [[https://www.geeksforgeeks.org/logic-gates-definition-types-uses/]]
\\ universal  gates : [[https://www.electronics-tutorials.ws/logic/universal-gates.html]]

* OCT 12, 2022 --------------------------------->

\\ file access / manipulation

* OCT 14, 2022 --------------------------------->

\\ combinational logic circuit (Half & Full Adder) [[computer_system_architecture - 3ed - morris_mano ~ pg 20]]
